{"name":"pyIsEmail","tagline":"Simple, robust email validation","body":"## Getting Started\r\n\r\npyIsEmail is a no-nonsense approach for checking whether that user-supplied\r\nemail address could be real. Sick of not being able to use\r\n[email address tagging][tagging] to sort through your [Bacn][bacn]? We can fix\r\nthat.\r\n\r\nRegular expressions are cheap to write, but often require maintenance when new\r\ntop-level domains come out or don't conform to email addressing features that\r\ncome back into vogue. pyIsEmail allows you to validate an email address -- and\r\neven check the domain, if you wish -- with one simple call, making your code\r\nmore readable and faster to write. When you want to know why an email address\r\ndoesn't validate, we even provide you with a diagnosis.\r\n\r\n[tagging]: http://en.wikipedia.org/wiki/Email_address#Address_tags\r\n[bacn]: http://en.wikipedia.org/wiki/Bacn\r\n\r\n## Install\r\n\r\nInstall from PyPI using [pip], a package manager for Python.\r\n\r\n    $ pip install pyIsEmail\r\n\r\nDon't have pip installed? Try installing it, by running this from the command\r\nline:\r\n\r\n    $ curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python\r\n\r\nOr, you can [download the source code (zip)][zipball] for ``pyIsEmail``, and\r\nthen run:\r\n\r\n    $ python setup.py install\r\n\r\nYou may need to run the above commands with ``sudo``.\r\n\r\n[pip]: http://www.pip-installer.org/en/latest/\r\n[zipball]: https://github.com/michaelherold/pyIsEmail/zipball/develop\r\n\r\n## Usage\r\n\r\nFor the simplest usage, import and use the ``is_email`` function:\r\n\r\n```python\r\n\r\nfrom pyisemail import is_email\r\n\r\naddress = \"test@example.com\"\r\nbool_result = is_email(address)\r\ndetailed_result = is_email(address, diagnose=True)\r\n```\r\n\r\nYou can also check whether the domain used in the email is a valid domain and\r\nwhether or not it has a valid MX record:\r\n\r\n```python\r\n\r\nfrom pyisemail import is_email\r\n\r\naddress = \"test@example.com\"\r\nbool_result_with_dns = is_email(address, check_dns=True)\r\ndetailed_result_with_dns = is_email(address, check_dns=True, diagnose=True)\r\n```\r\n\r\nThese are primary indicators of whether an email address can even be issued at\r\nthat domain. However, a valid response here *is not a guarantee that the email\r\nexists*, merely that is *can* exist.\r\n\r\nIn addition to the base ``is_email`` functionality, you can also use the\r\nvalidators by themselves. Check the validator source code to see how this works.\r\n\r\n## Uninstall\r\n\r\nWant to get rid of pyIsEmail? Did you install with pip? Here you go:\r\n\r\n    $ pip uninstall pyIsEmail\r\n\r\n## Acknowledgments\r\n\r\nThe base ``ParserValidator`` is based off of [Dominic Sayers][dominic]'\r\n[is_email script][is_email]. I wanted the functionality in Python, so I ported\r\nit from the original PHP.\r\n\r\n[dominic]: https://github.com/dominicsayers\r\n[is_email]: https://github.com/dominicsayers/isemail\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (``git checkout -b my-new-feature``)\r\n3. Commit your changes (``git commit -am 'Add some feature'``)\r\n4. Push to the branch (``git push origin my-new-feature``)\r\n5. Create new Pull Request\r\n\r\n## Versioning\r\n\r\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\r\nof this scheme should be reported as bugs.\r\n\r\n[semver]: http://semver.org/\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2013 Michael Herold. See LICENSE for details.","google":"UA-45292474-1","note":"Don't delete this file! It's used internally to help with page regeneration."}